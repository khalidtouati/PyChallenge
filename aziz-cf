{
	"AWSTemplateFormatVersion": "2010-09-09",

	"Description": "This template should create 1 VPC with 1 IGW and 1 ELB that pushes traffic to EC2 instance in two private subnets, each in every AZ. in  each subnet a minimum of 2 instances is required.",

	"Parameters": {

		"InstanceType": {
			"Description": "WebServer EC2 instance type",
			"Type": "String",
			"Default": "t2.micro",
			"AllowedValues": ["t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
			"ConstraintDescription": "must be a valid EC2 instance type."
		},

		"KeyName": {
			"Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
			"Type": "AWS::EC2::KeyPair::KeyName",
			"ConstraintDescription": "must be the name of an existing EC2 KeyPair."
		},
  
     "FrontendSize" : {
      "Description" : "Number of EC2 instances to launch for the Frontend server",
      "Type" : "Number",
      "Default" : "2"
    },

		"SSHLocation": {
			"Description": " The IP address range that can be used to SSH to the EC2 instances",
			"Type": "String",
			"MinLength": "9",
			"MaxLength": "18",
			"Default": "0.0.0.0/0",
			"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
		}
	},

	"Mappings": {
		"Region2Examples": {
			"us-east-1": {
				"Examples": "https://s3.amazonaws.com/cloudformation-examples-us-east-1"
			},
			"us-west-2": {
				"Examples": "https://s3-us-west-2.amazonaws.com/cloudformation-examples-us-west-2"
			},
			"us-west-1": {
				"Examples": "https://s3-us-west-1.amazonaws.com/cloudformation-examples-us-west-1"
			},
			"eu-west-1": {
				"Examples": "https://s3-eu-west-1.amazonaws.com/cloudformation-examples-eu-west-1"
			},
			"eu-west-2": {
				"Examples": "https://s3-eu-west-2.amazonaws.com/cloudformation-examples-eu-west-2"
			},
			"eu-central-1": {
				"Examples": "https://s3-eu-central-1.amazonaws.com/cloudformation-examples-eu-central-1"
			},
			"ap-southeast-1": {
				"Examples": "https://s3-ap-southeast-1.amazonaws.com/cloudformation-examples-ap-southeast-1"
			},
			"ap-northeast-1": {
				"Examples": "https://s3-ap-northeast-1.amazonaws.com/cloudformation-examples-ap-northeast-1"
			},
			"ap-northeast-2": {
				"Examples": "https://s3-ap-northeast-2.amazonaws.com/cloudformation-examples-ap-northeast-2"
			},
			"ap-southeast-2": {
				"Examples": "https://s3-ap-southeast-2.amazonaws.com/cloudformation-examples-ap-southeast-2"
			},
			"ap-south-1": {
				"Examples": "https://s3-ap-south-1.amazonaws.com/cloudformation-examples-ap-south-1"
			},
			"us-east-2": {
				"Examples": "https://s3-us-east-2.amazonaws.com/cloudformation-examples-us-east-2"
			},
			"ca-central-1": {
				"Examples": "https://s3-ca-central-1.amazonaws.com/cloudformation-examples-ca-central-1"
			},
			"sa-east-1": {
				"Examples": "https://s3-sa-east-1.amazonaws.com/cloudformation-examples-sa-east-1"
			},
			"cn-north-1": {
				"Examples": "https://s3.cn-north-1.amazonaws.com.cn/cloudformation-examples-cn-north-1"
			}
		},
		"AWSInstanceType2Arch": {
			"t1.micro": {
				"Arch": "PV64"
			},
			"t2.nano": {
				"Arch": "HVM64"
			},
			"t2.micro": {
				"Arch": "HVM64"
			},
			"t2.small": {
				"Arch": "HVM64"
			},
			"t2.medium": {
				"Arch": "HVM64"
			},
			"t2.large": {
				"Arch": "HVM64"
			},
			"m1.small": {
				"Arch": "PV64"
			},
			"m1.medium": {
				"Arch": "PV64"
			},
			"m1.large": {
				"Arch": "PV64"
			},
			"m1.xlarge": {
				"Arch": "PV64"
			},
			"m2.xlarge": {
				"Arch": "PV64"
			},
			"m2.2xlarge": {
				"Arch": "PV64"
			},
			"m2.4xlarge": {
				"Arch": "PV64"
			},
			"m3.medium": {
				"Arch": "HVM64"
			},
			"m3.large": {
				"Arch": "HVM64"
			},
			"m3.xlarge": {
				"Arch": "HVM64"
			},
			"m3.2xlarge": {
				"Arch": "HVM64"
			},
			"m4.large": {
				"Arch": "HVM64"
			},
			"m4.xlarge": {
				"Arch": "HVM64"
			},
			"m4.2xlarge": {
				"Arch": "HVM64"
			},
			"m4.4xlarge": {
				"Arch": "HVM64"
			},
			"m4.10xlarge": {
				"Arch": "HVM64"
			},
			"c1.medium": {
				"Arch": "PV64"
			},
			"c1.xlarge": {
				"Arch": "PV64"
			},
			"c3.large": {
				"Arch": "HVM64"
			},
			"c3.xlarge": {
				"Arch": "HVM64"
			},
			"c3.2xlarge": {
				"Arch": "HVM64"
			},
			"c3.4xlarge": {
				"Arch": "HVM64"
			},
			"c3.8xlarge": {
				"Arch": "HVM64"
			},
			"c4.large": {
				"Arch": "HVM64"
			},
			"c4.xlarge": {
				"Arch": "HVM64"
			},
			"c4.2xlarge": {
				"Arch": "HVM64"
			},
			"c4.4xlarge": {
				"Arch": "HVM64"
			},
			"c4.8xlarge": {
				"Arch": "HVM64"
			},
			"g2.2xlarge": {
				"Arch": "HVMG2"
			},
			"g2.8xlarge": {
				"Arch": "HVMG2"
			},
			"r3.large": {
				"Arch": "HVM64"
			},
			"r3.xlarge": {
				"Arch": "HVM64"
			},
			"r3.2xlarge": {
				"Arch": "HVM64"
			},
			"r3.4xlarge": {
				"Arch": "HVM64"
			},
			"r3.8xlarge": {
				"Arch": "HVM64"
			},
			"i2.xlarge": {
				"Arch": "HVM64"
			},
			"i2.2xlarge": {
				"Arch": "HVM64"
			},
			"i2.4xlarge": {
				"Arch": "HVM64"
			},
			"i2.8xlarge": {
				"Arch": "HVM64"
			},
			"d2.xlarge": {
				"Arch": "HVM64"
			},
			"d2.2xlarge": {
				"Arch": "HVM64"
			},
			"d2.4xlarge": {
				"Arch": "HVM64"
			},
			"d2.8xlarge": {
				"Arch": "HVM64"
			},
			"hi1.4xlarge": {
				"Arch": "HVM64"
			},
			"hs1.8xlarge": {
				"Arch": "HVM64"
			},
			"cr1.8xlarge": {
				"Arch": "HVM64"
			},
			"cc2.8xlarge": {
				"Arch": "HVM64"
			}
		},

		"AWSInstanceType2NATArch": {
			"t1.micro": {
				"Arch": "NATPV64"
			},
			"t2.nano": {
				"Arch": "NATHVM64"
			},
			"t2.micro": {
				"Arch": "NATHVM64"
			},
			"t2.small": {
				"Arch": "NATHVM64"
			},
			"t2.medium": {
				"Arch": "NATHVM64"
			},
			"t2.large": {
				"Arch": "NATHVM64"
			},
			"m1.small": {
				"Arch": "NATPV64"
			},
			"m1.medium": {
				"Arch": "NATPV64"
			},
			"m1.large": {
				"Arch": "NATPV64"
			},
			"m1.xlarge": {
				"Arch": "NATPV64"
			},
			"m2.xlarge": {
				"Arch": "NATPV64"
			},
			"m2.2xlarge": {
				"Arch": "NATPV64"
			},
			"m2.4xlarge": {
				"Arch": "NATPV64"
			},
			"m3.medium": {
				"Arch": "NATHVM64"
			},
			"m3.large": {
				"Arch": "NATHVM64"
			},
			"m3.xlarge": {
				"Arch": "NATHVM64"
			},
			"m3.2xlarge": {
				"Arch": "NATHVM64"
			},
			"m4.large": {
				"Arch": "NATHVM64"
			},
			"m4.xlarge": {
				"Arch": "NATHVM64"
			},
			"m4.2xlarge": {
				"Arch": "NATHVM64"
			},
			"m4.4xlarge": {
				"Arch": "NATHVM64"
			},
			"m4.10xlarge": {
				"Arch": "NATHVM64"
			},
			"c1.medium": {
				"Arch": "NATPV64"
			},
			"c1.xlarge": {
				"Arch": "NATPV64"
			},
			"c3.large": {
				"Arch": "NATHVM64"
			},
			"c3.xlarge": {
				"Arch": "NATHVM64"
			},
			"c3.2xlarge": {
				"Arch": "NATHVM64"
			},
			"c3.4xlarge": {
				"Arch": "NATHVM64"
			},
			"c3.8xlarge": {
				"Arch": "NATHVM64"
			},
			"c4.large": {
				"Arch": "NATHVM64"
			},
			"c4.xlarge": {
				"Arch": "NATHVM64"
			},
			"c4.2xlarge": {
				"Arch": "NATHVM64"
			},
			"c4.4xlarge": {
				"Arch": "NATHVM64"
			},
			"c4.8xlarge": {
				"Arch": "NATHVM64"
			},
			"g2.2xlarge": {
				"Arch": "NATHVMG2"
			},
			"g2.8xlarge": {
				"Arch": "NATHVMG2"
			},
			"r3.large": {
				"Arch": "NATHVM64"
			},
			"r3.xlarge": {
				"Arch": "NATHVM64"
			},
			"r3.2xlarge": {
				"Arch": "NATHVM64"
			},
			"r3.4xlarge": {
				"Arch": "NATHVM64"
			},
			"r3.8xlarge": {
				"Arch": "NATHVM64"
			},
			"i2.xlarge": {
				"Arch": "NATHVM64"
			},
			"i2.2xlarge": {
				"Arch": "NATHVM64"
			},
			"i2.4xlarge": {
				"Arch": "NATHVM64"
			},
			"i2.8xlarge": {
				"Arch": "NATHVM64"
			},
			"d2.xlarge": {
				"Arch": "NATHVM64"
			},
			"d2.2xlarge": {
				"Arch": "NATHVM64"
			},
			"d2.4xlarge": {
				"Arch": "NATHVM64"
			},
			"d2.8xlarge": {
				"Arch": "NATHVM64"
			},
			"hi1.4xlarge": {
				"Arch": "NATHVM64"
			},
			"hs1.8xlarge": {
				"Arch": "NATHVM64"
			},
			"cr1.8xlarge": {
				"Arch": "NATHVM64"
			},
			"cc2.8xlarge": {
				"Arch": "NATHVM64"
			}
		},
		"AWSRegionArch2AMI": {
			"us-east-1": {
				"PV64": "ami-2a69aa47",
				"HVM64": "ami-6869aa05",
				"HVMG2": "ami-61e27177"
			},
			"us-west-2": {
				"PV64": "ami-7f77b31f",
				"HVM64": "ami-7172b611",
				"HVMG2": "ami-60aa3700"
			},
			"us-west-1": {
				"PV64": "ami-a2490dc2",
				"HVM64": "ami-31490d51",
				"HVMG2": "ami-4b694d2b"
			},
			"eu-west-1": {
				"PV64": "ami-4cdd453f",
				"HVM64": "ami-f9dd458a",
				"HVMG2": "ami-2955524f"
			},
			"eu-west-2": {
				"PV64": "NOT_SUPPORTED",
				"HVM64": "ami-886369ec",
				"HVMG2": "NOT_SUPPORTED"
			},
			"eu-central-1": {
				"PV64": "ami-6527cf0a",
				"HVM64": "ami-ea26ce85",
				"HVMG2": "ami-81ac71ee"
			},
			"ap-northeast-1": {
				"PV64": "ami-3e42b65f",
				"HVM64": "ami-374db956",
				"HVMG2": "ami-46220c21"
			},
			"ap-northeast-2": {
				"PV64": "NOT_SUPPORTED",
				"HVM64": "ami-2b408b45",
				"HVMG2": "NOT_SUPPORTED"
			},
			"ap-southeast-1": {
				"PV64": "ami-df9e4cbc",
				"HVM64": "ami-a59b49c6",
				"HVMG2": "ami-c212aba1"
			},
			"ap-southeast-2": {
				"PV64": "ami-63351d00",
				"HVM64": "ami-dc361ebf",
				"HVMG2": "ami-0ad2db69"
			},
			"ap-south-1": {
				"PV64": "NOT_SUPPORTED",
				"HVM64": "ami-ffbdd790",
				"HVMG2": "ami-ca3042a5"
			},
			"us-east-2": {
				"PV64": "NOT_SUPPORTED",
				"HVM64": "ami-f6035893",
				"HVMG2": "NOT_SUPPORTED"
			},
			"ca-central-1": {
				"PV64": "NOT_SUPPORTED",
				"HVM64": "ami-730ebd17",
				"HVMG2": "NOT_SUPPORTED"
			},
			"sa-east-1": {
				"PV64": "ami-1ad34676",
				"HVM64": "ami-6dd04501",
				"HVMG2": "NOT_SUPPORTED"
			},
			"cn-north-1": {
				"PV64": "ami-77559f1a",
				"HVM64": "ami-8e6aa0e3",
				"HVMG2": "NOT_SUPPORTED"
			}
		},
  
   "SubnetConfig" : {
      "VPC"     : { "CIDR" : "10.0.0.0/16" },
      "Public"  : { "CIDR" : "10.0.0.0/24" },
      "Private" : { "CIDR" : "10.0.1.0/24" }
    }

	},

	"Resources": {
   "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ]},
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "PublicSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "GatewayToInternet" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },

    "PublicRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "PublicRoute" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "GatewayToInternet",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PublicRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "PublicSubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },

    "PublicNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "InboundHTTPPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "80", "To" : "80" }
      }
    },

    "InboundHTTPSPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "101",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "443", "To" : "443" }
      }
    },

    "InboundSSHPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "102",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : { "Ref" : "SSHLocation" },
        "PortRange" : { "From" : "22", "To" : "22" }
      }
    },

    "InboundEmphemeralPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "103",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "1024", "To" : "65535" }
      }
    },

    "OutboundPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },

    "PublicSubnetNetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet" },
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
      }
    },

    "PrivateSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Private", "CIDR" ]},
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Private" }
        ]
      }
    },

    "PrivateRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Private" }
        ]
      }
    },

    "PrivateSubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable" }
       
      }
    },

 "PrivateNATRouteTableAssociation":{  
         "Type":"AWS::EC2::Route",
         "Properties":{  
            "RouteTableId":{  
               "Ref":"PrivateRouteTable"
            },
            "DestinationCidrBlock":"0.0.0.0/0",
            "NatGatewayId":{  
               "Ref":"NATDevice"
            }
         }
      },    

    "PrivateNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Private" }
        ]
      }
    },

    "InboundPrivateNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },

    "OutBoundPrivateNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },

    "PrivateSubnetNetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet" },
        "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" }
      }
    },

    
    "NATDevice" : {
  "DependsOn" : "GatewayToInternet",
  "Type" : "AWS::EC2::NatGateway",
  "Properties" : {
    "AllocationId" : { "Fn::GetAtt" : ["EIP", "AllocationId"]},
    "SubnetId" : { "Ref" : "PublicSubnet"}
  }
},
"EIP" : {
  "Type" : "AWS::EC2::EIP",
  "Properties" : {
    "Domain" : "VPC"
  }
},

 "PublicElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "SecurityGroups" : [ { "Ref" : "PublicLoadBalancerSecurityGroup" } ],
        "Subnets" : [ { "Ref" : "PublicSubnet" } ],
        "Listeners" : [ { "LoadBalancerPort" : "80", "InstancePort" : "80", "Protocol" : "HTTP" } ],
        "HealthCheck" : {
          "Target" : "HTTP:80/index.php",
          "HealthyThreshold" : "3",
          "UnhealthyThreshold" : "5",
          "Interval" : "90",
          "Timeout" : "60"
        }
      }
    },

    "PublicLoadBalancerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Public ELB Security Group with HTTP access on port 80 from the internet",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [ { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"} ],
        "SecurityGroupEgress" : [ { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"} ]
      }
    },

    "FrontendFleet" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : [{ "Fn::GetAtt" : [ "PrivateSubnet", "AvailabilityZone" ] }],
        "VPCZoneIdentifier" : [{ "Ref" : "PrivateSubnet" }],
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig"  },
        "MinSize" : "1",
        "MaxSize" : "3",
        "DesiredCapacity" : { "Ref" : "FrontendSize" },
        "LoadBalancerNames" : [ { "Ref" : "PublicElasticLoadBalancer" } ],
        "Tags" : [ { "Key" : "Network", "Value" : "Public", "PropagateAtLaunch" : "true" } ]
      }
    },
   
    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Allow access from load balancer, as well as outbound HTTP and HTTPS traffic",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "SourceSecurityGroupId" : { "Ref" : "PublicLoadBalancerSecurityGroup" } } ],
        "SecurityGroupEgress" : [
           { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : "0.0.0.0/0" } ,
           { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0" } ]
      }
    },

"LaunchConfig": {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "httpd_php_install" : ["install_cfn", "install_apache_php" ]
          },
          "install_cfn" : {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": { "Fn::Join": [ "", [
                  "[main]\n",
                  "stack=", { "Ref": "AWS::StackId" }, "\n",
                  "region=", { "Ref": "AWS::Region" }, "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": { "Fn::Join": [ "", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                          "         --stack ", { "Ref" : "AWS::StackName" },
                          "         --resource LaunchConfig ",
                          "         --configsets httpd_php_install ",
                          "         --region ", { "Ref" : "AWS::Region" }, "\n"
                ]]},          
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
              }
            }
          },

          "install_apache_php" : {
            "packages" : {
              "yum" : {
                "php"       : [],
                "httpd"     : []
              }
            },
          
            "files" : {
             "/var/www/html/index.php": {
								"content": {
									"Fn::Join": ["", [
										"<html>\n",
										"  <head>\n",
										"    <title>Khalid Touati project</title>\n",
										"    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n",
										"  </head>\n",
										"  <body>\n",
										"    <h1> Hello, This is information about your EC2 instance that was created with CloudFormation:</h1> ",
										"    <p/>\n",
										"    <?php\n",
										"      // Print out the current data and time\n",
										"      print \"The Current Date and Time is: <br/>\";\n",
										"      print date(\"g:i A l, F j Y.\");\n",
										"    ?>\n",
										"    <p/>\n",
										"    <?php\n",
										"      // Setup a handle for CURL\n",
										"      $curl_handle=curl_init();\n",
										"      curl_setopt($curl_handle,CURLOPT_CONNECTTIMEOUT,2);\n",
										"      curl_setopt($curl_handle,CURLOPT_RETURNTRANSFER,1);\n",
										"      // Get the hostname of the intance from the instance metadata\n",
										"      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/local-hostname');\n",
										"      $hostname = curl_exec($curl_handle);\n",
										"      if (empty($hostname))\n",
										"      {\n",
										"        print \"Sorry, for some reason, we got no hostname back from metadata <br />\";\n",
										"      }\n",
										"      else\n",
										"      {\n",
										"        print \"Server Name = \" . $hostname . \"<br />\";\n",
										"      }\n",
										"      // Get the instance-id of the intance from the instance metadata\n",
										"      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/instance-id');\n",
										"      $instanceid = curl_exec($curl_handle);\n",
										"      if (empty($instanceid))\n",
										"      {\n",
										"        print \"Sorry, for some reason, we got no instance id back <br />\";\n",
										"      }\n",
										"      else\n",
										"      {\n",
										"        print \"EC2 instance-id = \" . $instanceid . \"<br />\";\n",
										"      }\n",
										"    ?>\n",
										"  </body>\n",
										"</html>\n"
									]]
								},
								"mode": "000600",
								"owner": "apache",
								"group": "apache"
							
						}
            },
        
            "services" : {
              "sysvinit" : {
                "httpd" : { "enabled" : "true", "ensureRunning" : "true" }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "InstanceType"   : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ {"Ref" : "InstanceSecurityGroup"} ],
        "KeyName"        : { "Ref" : "KeyName" },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                       "#!/bin/bash -xe\n",
                       "yum update -y aws-cfn-bootstrap\n",

                       "/opt/aws/bin/cfn-init -v ",
                       "         --stack ", { "Ref" : "AWS::StackName" },
                       "         --resource LaunchConfig ",
                       "         --configsets httpd_php_install ",
                       "         --region ", { "Ref" : "AWS::Region" }, "\n",

                       "/opt/aws/bin/cfn-signal -e $? ",
                       "         --stack ", { "Ref" : "AWS::StackName" },
                       "         --resource FrontendFleet ",
                       "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      }
    } 

 },
 
 
 "Outputs" : {
    "WebSite" : {
      "Description" : "URL of the website",
      "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "PublicElasticLoadBalancer", "DNSName" ]}]]}
    }
    }
}
